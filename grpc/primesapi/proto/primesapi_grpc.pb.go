// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: primesapi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimesAPIServiceClient is the client API for PrimesAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimesAPIServiceClient interface {
	Primes(ctx context.Context, in *PrimesApiRequest, opts ...grpc.CallOption) (PrimesAPIService_PrimesClient, error)
}

type primesAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimesAPIServiceClient(cc grpc.ClientConnInterface) PrimesAPIServiceClient {
	return &primesAPIServiceClient{cc}
}

func (c *primesAPIServiceClient) Primes(ctx context.Context, in *PrimesApiRequest, opts ...grpc.CallOption) (PrimesAPIService_PrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimesAPIService_ServiceDesc.Streams[0], "/primes_api.PrimesAPIService/Primes", opts...)
	if err != nil {
		return nil, err
	}
	x := &primesAPIServicePrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimesAPIService_PrimesClient interface {
	Recv() (*PrimesApiResponse, error)
	grpc.ClientStream
}

type primesAPIServicePrimesClient struct {
	grpc.ClientStream
}

func (x *primesAPIServicePrimesClient) Recv() (*PrimesApiResponse, error) {
	m := new(PrimesApiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimesAPIServiceServer is the server API for PrimesAPIService service.
// All implementations must embed UnimplementedPrimesAPIServiceServer
// for forward compatibility
type PrimesAPIServiceServer interface {
	Primes(*PrimesApiRequest, PrimesAPIService_PrimesServer) error
	mustEmbedUnimplementedPrimesAPIServiceServer()
}

// UnimplementedPrimesAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimesAPIServiceServer struct {
}

func (UnimplementedPrimesAPIServiceServer) Primes(*PrimesApiRequest, PrimesAPIService_PrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedPrimesAPIServiceServer) mustEmbedUnimplementedPrimesAPIServiceServer() {}

// UnsafePrimesAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimesAPIServiceServer will
// result in compilation errors.
type UnsafePrimesAPIServiceServer interface {
	mustEmbedUnimplementedPrimesAPIServiceServer()
}

func RegisterPrimesAPIServiceServer(s grpc.ServiceRegistrar, srv PrimesAPIServiceServer) {
	s.RegisterService(&PrimesAPIService_ServiceDesc, srv)
}

func _PrimesAPIService_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimesApiRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimesAPIServiceServer).Primes(m, &primesAPIServicePrimesServer{stream})
}

type PrimesAPIService_PrimesServer interface {
	Send(*PrimesApiResponse) error
	grpc.ServerStream
}

type primesAPIServicePrimesServer struct {
	grpc.ServerStream
}

func (x *primesAPIServicePrimesServer) Send(m *PrimesApiResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimesAPIService_ServiceDesc is the grpc.ServiceDesc for PrimesAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimesAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primes_api.PrimesAPIService",
	HandlerType: (*PrimesAPIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _PrimesAPIService_Primes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "primesapi.proto",
}
