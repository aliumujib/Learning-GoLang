// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: maxapi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaxAPIServiceClient is the client API for MaxAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaxAPIServiceClient interface {
	Max(ctx context.Context, opts ...grpc.CallOption) (MaxAPIService_MaxClient, error)
}

type maxAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxAPIServiceClient(cc grpc.ClientConnInterface) MaxAPIServiceClient {
	return &maxAPIServiceClient{cc}
}

func (c *maxAPIServiceClient) Max(ctx context.Context, opts ...grpc.CallOption) (MaxAPIService_MaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaxAPIService_ServiceDesc.Streams[0], "/max_api.MaxAPIService/Max", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxAPIServiceMaxClient{stream}
	return x, nil
}

type MaxAPIService_MaxClient interface {
	Send(*MaxApiRequest) error
	Recv() (*MaxApiResponse, error)
	grpc.ClientStream
}

type maxAPIServiceMaxClient struct {
	grpc.ClientStream
}

func (x *maxAPIServiceMaxClient) Send(m *MaxApiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxAPIServiceMaxClient) Recv() (*MaxApiResponse, error) {
	m := new(MaxApiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxAPIServiceServer is the server API for MaxAPIService service.
// All implementations must embed UnimplementedMaxAPIServiceServer
// for forward compatibility
type MaxAPIServiceServer interface {
	Max(MaxAPIService_MaxServer) error
	mustEmbedUnimplementedMaxAPIServiceServer()
}

// UnimplementedMaxAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaxAPIServiceServer struct {
}

func (UnimplementedMaxAPIServiceServer) Max(MaxAPIService_MaxServer) error {
	return status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedMaxAPIServiceServer) mustEmbedUnimplementedMaxAPIServiceServer() {}

// UnsafeMaxAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaxAPIServiceServer will
// result in compilation errors.
type UnsafeMaxAPIServiceServer interface {
	mustEmbedUnimplementedMaxAPIServiceServer()
}

func RegisterMaxAPIServiceServer(s grpc.ServiceRegistrar, srv MaxAPIServiceServer) {
	s.RegisterService(&MaxAPIService_ServiceDesc, srv)
}

func _MaxAPIService_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxAPIServiceServer).Max(&maxAPIServiceMaxServer{stream})
}

type MaxAPIService_MaxServer interface {
	Send(*MaxApiResponse) error
	Recv() (*MaxApiRequest, error)
	grpc.ServerStream
}

type maxAPIServiceMaxServer struct {
	grpc.ServerStream
}

func (x *maxAPIServiceMaxServer) Send(m *MaxApiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxAPIServiceMaxServer) Recv() (*MaxApiRequest, error) {
	m := new(MaxApiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxAPIService_ServiceDesc is the grpc.ServiceDesc for MaxAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaxAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "max_api.MaxAPIService",
	HandlerType: (*MaxAPIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Max",
			Handler:       _MaxAPIService_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxapi.proto",
}
